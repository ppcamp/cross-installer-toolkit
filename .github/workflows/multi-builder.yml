# Builds and packages all versions of the specified subprojects
#
# This action assumes that no release will be created for elements with errors
#
# https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions
name: 'multi-builder'

on:
  push:
    branches:
      - release* # Match any branch that has release syntax
    # tags:
    #   - '*' # Match any new tag

env:
  # Necessary for most environments as build failure can occur due to OOM issues
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}  # Use the tag that triggered the workflow
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            # - name: Upload artfact # Upload build assets
        #   uses: actions/upload-artifact@v3
        #   if: inputs.package == 'true'
        #   with:
        #     name: Wails Build ${{runner.os}} ${{inputs.build-name}}
        #     path: |
        #       */bin/
        #       *\bin\*
        # - name: Release
        #   uses: softprops/action-gh-release@v1
        #   if: inputs.package == 'true' && startsWith(github.ref, 'refs/tags/')
        #   with:
        #     files: |
        #       */bin/*
        # - name: Set up Go
        #   uses: actions/setup-go@v4
        #   with:
        #     go-version: '1.23'
        # - name: Set up node
        #   uses: actions/setup-node@v4
        #   with:
        #     node-version: lts/*
        #     cache: 'npm'

  publish-tauri-svelte:
    needs: [release]  # This job depends on 'release'
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''
          # - platform: 'macos-latest' # for Arm based macs (M1 and above).
          #   args: '--target aarch64-apple-darwin'
          # - platform: 'macos-latest' # for Intel based macs.
          #   args: '--target x86_64-apple-darwin'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Set working directory
        run: |
          echo "Running in the root directory"
          ls
        working-directory: tauri-svelte

      - name: install OS dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if`
          # to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './tauri-svelte/src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: cd tauri-svelte && npm install

      - name: execute tauri bundler command
      # https://github.com/tauri-apps/tauri-action/blob/dev/examples/publish-to-manual-release.yml
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: 'svelte'
          tagName: ${{ github.ref }} # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: Release ${{ github.ref }}
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  publish-tauri-vanilla:
    needs: [release]  # This job depends on 'release'
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
          - platform: 'windows-latest'
            args: ''
          # - platform: 'macos-latest' # for Arm based macs (M1 and above).
          #   args: '--target aarch64-apple-darwin'
          # - platform: 'macos-latest' # for Intel based macs.
          #   args: '--target x86_64-apple-darwin'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Set working directory
        run: |
          echo "Running in the root directory"
          ls
        working-directory: tauri-svelte

      - name: install OS dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if`
          # to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './tauri-vanilla/src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: cd tauri-vanilla && npm install

      - name: execute tauri bundler command
      # https://github.com/tauri-apps/tauri-action/blob/dev/examples/publish-to-manual-release.yml
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: 'vanilla'
          tagName: ${{ github.ref }} # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: Release ${{ github.ref }}
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  publish-wails:
      needs: [release]  # This job depends on 'release'
      strategy:
        fail-fast: false # Failure in one platform build won't impact the others
        matrix:
          build:
            - name: 'App'
              platform:  'linux/amd64'
              os: 'ubuntu-24.04'
            - name: 'App'
              platform:  'windows/amd64'
              os: 'windows-latest'
            # - name: 'App'
            #   platform:  'darwin/universal'
            #   os: 'macos-latest'

      runs-on: ${{ matrix.build.os }}
      steps:
        - name: Checkout
          uses: actions/checkout@v4
          with:
            submodules: recursive

        - name: Set working directory
          run: |
            echo "Running in the root directory"
            ls
          working-directory: wails-svelte

        - name: Build wails
          uses: dAppServer/wails-build-action@v2.2
          id: build
          with:
            build-name: ${{ matrix.build.name }}
            build-platform: ${{ matrix.build.platform }}
            package: false
            go-version: '1.23'
            node-version: '22.8'

        - name: Set up nfpm packages
          if: matrix.platform == 'ubuntu-24.04'
          run: |
            echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
            sudo apt update
            sudo apt install nfpm
            make wails-ship-debian

        - name: Upload Release Asset
          uses: softprops/action-gh-release@v1
          with:
            tag: ${{ github.ref }}  # Use the tag that triggered the workflow
            files: |
              */bin/
              *\bin\*
